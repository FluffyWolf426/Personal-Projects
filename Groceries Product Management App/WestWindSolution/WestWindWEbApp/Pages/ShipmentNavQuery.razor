@page "/shipments"
<PageTitle>Shipment Nav Query</PageTitle>
<h3>Shipment Nav Query</h3>
<h4>using navigational properties</h4>

<br />
@if (feedbackMessage.Length > 0)
{
    <div class="alert alert-info">
        @feedbackMessage
    </div>
}
<!-- this area will handle the display of a collection of error messages
     this collection can be of any type: array, List, Dictionary,...

     in this example we will use a List<string>
-->
@if (errors.Count() > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var message in errors)
            {
                <li>@message</li>
            }
        </ul>
    </div>
}

<!-- input of filter data argment -->
<div class="row">
    <div class="offset-3 col-md-5">
        <label for="dateinput">Enter your date:</label>&nbsp;&nbsp;
        <input id="dateinput" type="date" @bind="yearmontharg" /><br/><br/>
        <button type="submit" class="btn btn-primary rounded-pill"
        @onclick="GetShipments">
            Get Shipments
        </button>&nbsp;&nbsp;
        <!-- these two buttons demonstrate how to leave this page and proceed
                to another
             one button will use a NavLink on the button
             one button will call an event on this page which will do the redirection
        -->
        <button type="submit" class="btn btn-info rounded-pill">
            <NavLink href="regions" >Region via NavLink</NavLink>
        </button>&nbsp;&nbsp;
        <button type="submit" class="btn btn-info rounded-pill" @onclick="GoToRegion">
            Region via Event
        </button>
    </div>
</div>

@if(info.Count == 0)
{
    <div class="row">
        <div class="offset-4 col-md-4">
            <p style="font-size:48px;">No data to display</p>
        </div>
    </div>
}
else
{
  
    <div class="row">
        @* to have a scrolling table use the following div around your table*@
        <div class="col-md-12 overflow-scroll" style="height:500px">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Ship ID</th>
                        <th>Ship Date</th>
                        <th>Ship Via</th>
                        <th>Shipper</th>
                    </tr>
                </thead>
               
                    <tbody>
                    
                        @foreach(Shipment item in info)
                        {
                            <tr>
                                <td>@item.ShipmentID</td>
                                <td>@item.ShippedDate.ToShortDateString()</td>
                                <td>@item.ShipVia</td>
                                <!-- to get the company name we will use the
                                        navigational property on shipment
                                     to use the navigation property of a
                                        record you NEED to have the collection
                                        for the property to reference
                                -->
                                <td>@item.ShipViaNavigation.CompanyName</td>
                            </tr>
                        }
                    </tbody>
                
            </table>
        </div>
    </div>
}

@code {
    @using WestWindSystem.BLL;
    @using WestWindSystem.Entities;
    private string feedbackMessage = "";
    private List<string> errors = new List<string>(); //instead of a Dictionary
    private DateTime yearmontharg;


    [Inject]
    private ShipmentServices _shipmentServices { get; set; }
    private List<Shipment> info = new List<Shipment>();

    [Inject]
    private ShipperServices _shipperServices{ get; set; }
    private List<Shipper> shipperInfo = new List<Shipper>();

    [Inject]
    private NavigationManager _navManager{ get; set; }

    protected override void OnInitialized()
    {
        yearmontharg = DateTime.Parse("2018-01-01"); //DateTime.Today;
        shipperInfo = _shipperServices.Shipper_GetList(); //shipper collection
        base.OnInitialized();
    }

    private void GetShipments()
    {
        if (string.IsNullOrWhiteSpace(yearmontharg.ToString()))
        {
            errors.Add("Date not entered.");
        }
        else
        {
            if (yearmontharg >= DateTime.Today.AddDays(1))
            {
                errors.Add("Date is in the future. Shipment has not happened");
            }
        }
        if (errors.Count == 0)
        {
            info = _shipmentServices.Shipment_GetByYearMonth(yearmontharg);
        }
    }

    private void GoToRegion()
    {
        //this uses the injected NavigationManager services
        _navManager.NavigateTo("regions");
    }
    //routine to get the inner exception on thrown errors
    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }
}
